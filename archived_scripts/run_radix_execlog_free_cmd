#!/bin/bash
set -x

POSITIONAL=()
qemu=../qemu_x86/build/qemu-system-x86_64

qemu_plugin_addrdump=../qemu_x86/build/tests/plugin/libexeclog.so
# change to /data1/walk_log.bin to avoid moving data across partitions

log_name=x86.log

image_path=""
DEFAULT_IMAGE_PATH=$(realpath ../image.ext4)

addrdump_bin_record=""
BIN_RECORD_DEFAULT="walk_log.bin"

thp_config=""
THP_DEFAULT="never"

gdb_flags=()
logging_flags=()

bench_torun=""
BENCH_DEFAULT="graphbig_bfs.sh"

k_exec_only_val="0"
workload=""

command=""

VM_SERVER_PORT=2024
HOST_SERVER_PORT=12024

VM_LOGGING_CTL_PORT=2025
HOST_LOGGING_CTL_PORT=12025

RUN_DYNAMORIO=false

# TODO: change the script that
while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
	--thp)
		if [[ $# -gt 1 ]]; then
			thp_config="$2"
			shift 2
		else
			echo "Option --thp requires an argument. Default is $THP_DEFAULT"
			exit 1
		fi
		;;
	--bench)
		if [[ $# -gt 1 ]]; then
			bench_torun="$2"
			shift 2
		else
			echo "Option --thp requires an argument. Default is $BENCH_DEFAULT"
			exit 1
		fi
		;;
	--cmd)
		if [[ $# -gt 1 ]]; then
			command="$2"
			shift 2
		else
			echo "Option --cmd. Default is $command"
			exit 1
		fi
		;;
	--out)
		if [[ $# -gt 1 ]]; then
			addrdump_bin_record="$2"
			log_name="${addrdump_bin_record}.log"
			shift 2
		else
			echo "Option --out requires an argument. Default is $BIN_RECORD_DEFAULT"
			exit 1
		fi
		;;
	--image)
		if [[ $# -gt 1 ]]; then
			image_path="$2"
			shift 2
		else
			echo "Option --image requires an argument. Default is $DEFAULT_IMAGE_PATH"
			exit 1
		fi
		;;
    --redis_workload)
        if [[ $# -gt 1 ]]; then
			workload="$2"
			shift 2
		fi
        ;;
	--k_exec_only)
		k_exec_only_val="1"
		shift # past value
		;;
	--gdb)
		gdb_flags+=("-s" "-S")
		shift # past value
		;;
	--vm_server_port)
		if [[ $# -gt 1 ]]; then
			VM_SERVER_PORT="$2"
			shift 2
		else
			echo "Option --vm_server_port requires an argument. Default is $VM_SERVER_PORT"
			exit 1
		fi
		;;
	--host_server_port)
		if [[ $# -gt 1 ]]; then
			HOST_SERVER_PORT="$2"
			shift 2
		else
			echo "Option --host_server_port requires an argument. Default is $HOST_SERVER_PORT"
			exit 1
		fi
		;;
	--vm_logging_ctl_port)
		if [[ $# -gt 1 ]]; then
			VM_LOGGING_CTL_PORT="$2"
			shift 2
		else
			echo "Option --vm_logging_ctl_port requires an argument. Default is $VM_LOGGING_CTL_PORT"
			exit 1
		fi
		;;
	--host_logging_ctl_port)
		if [[ $# -gt 1 ]]; then
			HOST_LOGGING_CTL_PORT="$2"
			shift 2
		else
			echo "Option --host_logging_ctl_port requires an argument. Default is $HOST_LOGGING_CTL_PORT"
			exit 1
		fi
		;;
	--mmu)
		# qemu_args+=("-d" "mmu" "-D" "mmu.log")
		# qemu_args+=("-d" "plugin" "-D" "mmu.log")
		logging_flags+=("-d" "mmu" "-D" "mmu.log")
		# logging_flags+=("-d" "plugin,int,exec,in_asm,op_opt,out_asm" "-D" "mmu.log")
		shift # past value
		;;
	--default)
		DEFAULT=YES
		shift # past argument
		;;
	--run-dynamorio) 
		RUN_DYNAMORIO=true 
		shift # past argument
		;; 
	*)                  # unknown option
		POSITIONAL+=("$1") # save it in an array for later
		shift              # past argument
		;;
	esac
done

if [ "$thp_config" = "" ]; then
	thp_config="$THP_DEFAULT"
fi

if [ "$addrdump_bin_record" = "" ]; then
	addrdump_bin_record="$BIN_RECORD_DEFAULT"
fi

if [ "$image_path" = "" ]; then
	image_path="$DEFAULT_IMAGE_PATH"
fi

if [ "$bench_torun" = "" ]; then
	bench_torun="$BENCH_DEFAULT"
fi

START_COMMAND="cd rethinkVM_bench; ./run_scripts/${bench_torun};"
# PROLOGUE="mount -t proc proc /proc; mount -t sysfs none /sys; mkdir /dev/pts; mount devpts /dev/pts -t devpts; busybox ifconfig eth0 127.0.0.1; busybox ip route add 224.0.0.0/4 dev eth0; busybox ifconfig lo 127.0.0.1; "
PROLOGUE="mount -t proc proc /proc; mount -t sysfs none /sys; mkdir /dev/pts; mount devpts /dev/pts -t devpts; busybox ifconfig eth0 10.0.2.15 netmask 255.255.255.0 up; busybox ip route add default via 10.0.2.2; busybox ifconfig lo 127.0.0.1 up;"
# START_COMMAND=$command
# EPILOGUE=""
# EPILOGUE="sync; bash; sleep 5; /shutdown;"
EPILOGUE="sync; sleep 5; /shutdown;"
# each argument that should be neccesarily seperated by space should be in a sperate "" item.
# every thing within the comment will be treated as pure literal.
qemu_args=(
	"$qemu"
	"-kernel" "arch/x86/boot/bzImage"
	"-m" "92160M"
	"-display" "none"
	"-hda" "${image_path}"
	# "-drive" "file=/ubuntu22.04/image_full.ext4,format=raw"
	# "-serial" "pipe:${PIPE_FILE_NAME}"
	"-serial" "stdio"
	"-icount" "shift=0" # icount mode to run with VM timing
	"-append" "root=/dev/sda rw rootdelay=10 rootfstype=ext4 console=ttyS0,115200 earlyprintk=serial,ttyS0,115200 apic=verbose transparent_hugepage=${thp_config} init=/usr/bin/bash -- -c \"$PROLOGUE $START_COMMAND $EPILOGUE /usr/bin/bash\""
	"-plugin" "${qemu_plugin_addrdump},filename=${addrdump_bin_record},k_exec_only=${k_exec_only_val}"
	# "-netdev" "user,id=net0" 
	"-netdev" "user,id=net0,hostfwd=tcp::${HOST_SERVER_PORT}-:${VM_SERVER_PORT},hostfwd=tcp::${HOST_LOGGING_CTL_PORT}-:${VM_LOGGING_CTL_PORT}" 
    "-device" "virtio-net,netdev=net0" 
	# "--trace" "guest_mem_before_exec"
	# "-append" "init=/bin/sh console=ttyS0,115200 root=/dev/sda earlyprintk=serial,ttyS0,115200 apic=verbose"
	# "-append" "init=/bin/sh console=ttyS0,115200 earlyprintk=serial,ttyS0,115200"
	#	"-append" "init=/bin/sh console=ttyS0,115200 earlyprintk=dbgpa"
	# "-d" "mmu" "-D" "mmu.log"
	# "-nographic"
	# "-singlestep"
)

qemu_args+=("${gdb_flags[@]}")
qemu_args+=("${logging_flags[@]}")


tee_args+=("tee" "$log_name")

# the command printed below can be copied into bash command and run without modification
printf '%q ' "${qemu_args[@]}"
# "|" needs to be %s. with %q it will printed with escape
printf '%s ' "|"
printf '%q ' "${tee_args[@]}"
echo

head_hash="$(git log -n 1 --pretty=format:"%h")"
time=$(date -r vmlinux +"%Y-%m-%d-%H-%M-%S")
cp vmlinux ${addrdump_bin_record}.vmlinux-${time}-${head_hash}

"${qemu_args[@]}" 2>&1 | "${tee_args[@]}"


if [ $RUN_DYNAMORIO == true ]; then 
	prefix="radix_${thp_config}_${bench_torun}" # TODO: ${bench_torun} has the .sh attached to the end (remove it)
	output_filename="${prefix}_dyna_asplos_smalltlb_config_realpwc.log"
	data_folder="/data1/run_dynamorio_tests"
	echo "input_file: ${addrdump_bin_record}     output: ${output_filename}" 
	# TODO hardcoding an absolute path to the data_folder 
	docker container start 923fefd009af
	docker exec 923fefd009af sh -c "cd /start_point/home/alan/dynamorio; ./run_asplos_smalltlb_realpwc.sh --arch radix --input-file /start_point${addrdump_bin_record} --output-file /start_point${data_folder}/${output_filename}" 
	cd ../dynamorio
	python calc_page_walk_latency.py --file ${data_folder}/${output_filename} 
fi 